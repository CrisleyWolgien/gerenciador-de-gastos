Gerenciador de Gastos (CyberCaixa)

CyberCaixa √© uma aplica√ß√£o full-stack de gerenciamento de finan√ßas pessoais. Ela apresenta uma interface de usu√°rio moderna e tem√°tica "cyberpunk" para rastrear despesas, gerenciar or√ßamentos e visualizar h√°bitos de consumo.

O projeto √© dividido em um Backend (constru√≠do com FastAPI em Python) e um Frontend (constru√≠do com React e Vite).

üöÄ Funcionalidades Principais

    Autentica√ß√£o de Usu√°rio: Sistema completo de registro e login de usu√°rios usando tokens JWT.

    Dashboard Visual (SYSTEM_OVERVIEW):

        Vis√£o geral com Gasto Total, Or√ßamento Total e a Principal Categoria de gasto.

        Gr√°fico de barras para o fluxo de gastos di√°rios.

        Gr√°fico de pizza para a distribui√ß√£o de gastos por categoria.

        Cards de acompanhamento do progresso de cada or√ßamento.

    Gest√£o de Transa√ß√µes (TRANSACTIONS):

        CRUD completo para despesas: crie, liste, edite e delete transa√ß√µes.

        Cria√ß√£o de novas entradas (NEW_ENTRY) com campos para nome, descri√ß√£o, valor, data e categoria.

    Filtros Avan√ßados:

        Filtre transa√ß√µes por nome, descri√ß√£o ou categoria.

        Selecione per√≠odos de data customizados com um seletor de intervalo (DateRangePicker).

    Gest√£o de Or√ßamento (BUDGET_GRID):

        Crie, visualize e delete categorias de or√ßamento personalizadas.

    Interface Tem√°tica:

        UI com tema "cyberpunk" usando fontes customizadas (Chakra Petch, Share Tech Mono).

        Fundo animado "Plexus" e efeitos "glitch" para uma est√©tica futurista.

üõ†Ô∏è Tecnologias Utilizadas

Backend

    Python 3: Linguagem principal da aplica√ß√£o.

    FastAPI: Framework web para a constru√ß√£o da API RESTful.

    SQLModel: ORM para intera√ß√£o com o banco de dados e valida√ß√£o de dados.

    PostgreSQL: Banco de dados relacional (conectado via Neon.tech, conforme backend/.env).

    JWT (Passlib & python-jose): Para autentica√ß√£o de usu√°rio baseada em token.

    Uvicorn: Servidor ASGI para rodar a aplica√ß√£o FastAPI.

Frontend

    React 19: Biblioteca principal para a constru√ß√£o da interface de usu√°rio.

    Vite: Ferramenta de build e servidor de desenvolvimento de alta performance.

    Tailwind CSS: Framework de estiliza√ß√£o utility-first (com um tema customizado em frontend/src/index.css).

    React Router: Para roteamento no lado do cliente (<Routes>, <PrivateRoute>).

    Recharts: Biblioteca para a cria√ß√£o dos gr√°ficos do dashboard.

    date-fns: Para manipula√ß√£o e formata√ß√£o de datas.

‚öôÔ∏è Instala√ß√£o e Execu√ß√£o

Pr√©-requisitos

    Python 3.10+

    Node.js 18+

    Um banco de dados PostgreSQL acess√≠vel.

1. Configura√ß√£o do Backend

    Navegue at√© a pasta backend:
    Bash

cd backend

Crie e ative um ambiente virtual:
Bash

# Linux/macOS
python3 -m venv venv
source venv/bin/activate

# Windows
python -m venv venv
.\venv\Scripts\activate

Instale as depend√™ncias:
Bash

pip install -r requirements.txt

Crie um arquivo .env na raiz da pasta backend (voc√™ pode usar o arquivo backend/.env fornecido como base) e defina as seguintes vari√°veis:
Snippet de c√≥digo

DATABASE_URL="postgresql://user:password@host:port/dbname"
SECRET_KEY="seu_segredo_super_secreto_para_jwt"
ALGORITHM="HS256"
ACCESS_TOKEN_EXPIRE_MINUTES=300

Crie as tabelas no banco de dados:
Bash

python create_tables.py

Inicie o servidor backend:
Bash

    uvicorn main:app --reload

    O servidor estar√° rodando em http://127.0.0.1:8000.

2. Configura√ß√£o do Frontend

    Em um novo terminal, navegue at√© a pasta frontend:
    Bash

cd frontend

Instale as depend√™ncias do Node.js:
Bash

npm install

Inicie o servidor de desenvolvimento:
Bash

    npm run dev

    A aplica√ß√£o React estar√° acess√≠vel em http://localhost:5173 (ou outra porta indicada pelo Vite).

üó∫Ô∏è Principais Endpoints da API

    POST /users: Cria um novo usu√°rio.

    POST /login: Autentica um usu√°rio e retorna um token JWT.

    GET /dashboard/overview: Retorna todos os dados agregados para o dashboard (gastos, or√ßamentos, gr√°ficos).

    GET /expenses: Lista todas as despesas do usu√°rio, com suporte a filtros de data, categoria e busca.

    POST /expenses: Cria uma nova despesa.

    PUT /expense/{id}: Atualiza uma despesa existente.

    POST /expense/{id}/delete: Deleta uma despesa.

    GET /budgets: Lista todas as categorias de or√ßamento criadas pelo usu√°rio.

    POST /budget: Cria uma nova categoria de or√ßamento.

    PUT /budget/{id}: Atualiza uma categoria de or√ßamento.

    POST /budget/{id}/delete: Deleta uma categoria de or√ßamento.

    GET /budget/categories: Retorna uma lista simples com os nomes das categorias de or√ßamento do usu√°rio.
